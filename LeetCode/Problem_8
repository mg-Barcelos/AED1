//Leetcode 148
#include <stdio.h>
#include <stdlib.h>

// Definição da estrutura do nó da lista ligada
struct ListNode {
    int val;
    struct ListNode *next;
};

// Função para encontrar o meio da lista ligada usando ponteiros lento e rápido
struct ListNode* findMiddle(struct ListNode* head) {
    struct ListNode *slow = head, *fast = head->next;
    
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

// Função para mesclar duas listas ordenadas
struct ListNode* merge(struct ListNode* list1, struct ListNode* list2) {
    struct ListNode dummy;
    struct ListNode* tail = &dummy;
    dummy.next = NULL;
    
    while (list1 && list2) {
        if (list1->val < list2->val) {
            tail->next = list1;
            list1 = list1->next;
        } else {
            tail->next = list2;
            list2 = list2->next;
        }
        tail = tail->next;
    }
    
    tail->next = (list1) ? list1 : list2;
    return dummy.next;
}

// Função principal do Merge Sort
struct ListNode* sortList(struct ListNode* head) {
    if (!head || !head->next) return head;

    struct ListNode* mid = findMiddle(head);
    struct ListNode* right = mid->next;
    mid->next = NULL;

    struct ListNode* left = sortList(head);
    right = sortList(right);

    return merge(left, right);
}

// Funções auxiliares para teste
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

void printList(struct ListNode* head) {
    while (head) {
        printf("%d -> ", head->val);
        head = head->next;
    }
    printf("NULL\n");
}

// Função principal para testar o código
int main() {
    // Criando uma lista: 4 -> 2 -> 1 -> 3
    struct ListNode* head = createNode(4);
    head->next = createNode(2);
    head->next->next = createNode(1);
    head->next->next->next = createNode(3);

    printf("Lista Original: ");
    printList(head);

    // Ordenando a lista
    head = sortList(head);

    printf("Lista Ordenada: ");
    printList(head);

    return 0;
}